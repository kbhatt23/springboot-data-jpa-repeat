SQLS:
--------------
create table product(
id int PRIMARY KEY AUTO_INCREMENT,
name varchar(30),
description varchar(250),
price decimal(8,3)
);

for id generator practise

------------------------
drop table employee
identity strategy:

create table employee_identity_strategy(
id int PRIMARY KEY AUTO_INCREMENT,
name varchar(30)
);

table strategy :

- we need to create a new table
create table id_gen(
gen_name varchar(60) PRIMARY KEY,
gen_val int(20)
);
- need not auto increment now
create table employee_table_strategy(
id int PRIMARY KEY,
name varchar(30)
);

-------------

create table student(
id int PRIMARY KEY AUTO_INCREMENT,
fname varchar(30),
lname varchar(30),
score int
);


------------Inheritance mapping-
a. single table
	
create table payment_single_table(
	id int PRIMARY KEY AUTO_INCREMENT,
	amount decimal(8,3),
	card_number varchar(30),
	cheque_number varchar(30),
	payment_mode varchar(20)
);

b. table per class:
create table cheque_table_per_class(
	id int PRIMARY KEY AUTO_INCREMENT,
	amount decimal(8,3),
	cheque_number varchar(30)
);

create table credit_card_table_per_class(
	id int PRIMARY KEY AUTO_INCREMENT,
	amount decimal(8,3),
	card_number varchar(30)
);

c. joined
create table payment_joined(
	id int PRIMARY KEY AUTO_INCREMENT,
	amount decimal(8,3)
);

create table credit_card_joined(
	id int,
	card_number varchar(30),
	FOREIGN KEY (id) REFERENCES payment_joined(id)
);

create table cheque_joined(
	id int,
	cheque_number varchar(30),
	FOREIGN KEY (id) REFERENCES payment_joined(id)
);

------Freemium-premium producst---------------

a. single table

create table product_single_table(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	description varchar(100),
	freemium_number varchar(30),
	freemium_message varchar(60),
	product_type varchar(30),
	preemium_number varchar(30),
	preemium_message varchar(60)
	
);
b. table per class

create table freemium_product_table_per_class(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	description varchar(100),
	freemium_number varchar(30),
	freemium_message varchar(60)
);

create table preemium_product_table_per_class(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	description varchar(100),
	preemium_number varchar(30),
	preemium_message varchar(60)
);

c. joined tables
create table product_joined(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	description varchar(100)
);
create table freemium_product_joined(
	id int,
	freemium_number varchar(30),
	freemium_message varchar(60),
	FOREIGN KEY (id) REFERENCES product_joined(id)
);

create table preemium_product_joined(
	id int,
	preemium_number varchar(30),
	preemium_message varchar(60),
	FOREIGN KEY (id) REFERENCES product_joined(id)
);

-----composition/aggregation / has a relationship

create table student_with_address(
	id int PRIMARY KEY AUTO_INCREMENT,
	fname varchar(30),
	lname varchar(30),
	score int,
	address1 varchar(100),
	state varchar(20),
	country varchar(20)
);


-----------ONE TO MANY MAPPING--------------------
create table course(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	description varchar(60)
);


create table review(
	id int PRIMARY KEY AUTO_INCREMENT,
	rating int,
	comment varchar(60),
	course_id int,
	FOREIGN KEY (course_id) REFERENCES course(id)	
);


-----------Many to many programmer user case=============
create table programmer(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	salary decimal(9,2)
);

create table project(
	id int PRIMARY KEY AUTO_INCREMENT,
	client_name varchar(30),
	description varchar(60)
);

create table programmers_projects(
	programmer_id int not null,
	project_id int not null,
	FOREIGN KEY (programmer_id) REFERENCES programmer(id),
	FOREIGN KEY (project_id) REFERENCES project(id)
);


------------ONE TO ONE RELATIONSHIP------
create table person(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	age int
);

create table identification_card(
	id int PRIMARY KEY AUTO_INCREMENT,
	card_number int,
	card_type varchar(30),
	valid_from date,
	valid_to date,
	person_id int,
	FOREIGN KEY (person_id) REFERENCES person(id)
);

create table bank_account(
	id int PRIMARY KEY AUTO_INCREMENT,
	name varchar(30),
	balance int
);


----image upload=======

create table image(
	id int primary key auto_increment,
	name varchar(30),
	image_data blob
);


----------Clinic Apointment service---------

create table doctor(
	id int primary key auto_increment,
	first_name varchar(40),
	last_name varchar(40),
	speciality varchar(30)
);

create table patient(
	id int primary key auto_increment,
	first_name varchar(40),
	last_name varchar(40)
);

create table doctors_patients(
	doctor_id int not null,
	patient_id int not null,
	FOREIGN KEY (doctor_id) REFERENCES doctor(id),
	FOREIGN KEY (patient_id) REFERENCES patient(id)
);

create table appointment(
	id int primary key auto_increment,
	appointment_date TIMESTAMP,
	completed boolean,
	patient_id int,
	doctor_id int,
	problem varchar(250),
	FOREIGN KEY (doctor_id) REFERENCES doctor(id),
	FOREIGN KEY (patient_id) REFERENCES patient(id)
	
);
2020-11-12T23:15:00.390